// <auto-generated />
using System;
using EasyMicroservices.TemplateGeneratorMicroservice.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EasyMicroservices.TemplateGeneratorMicroservice.Migrations
{
    [DbContext(typeof(TemplateGeneratorContext))]
    partial class TemplateGeneratorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormDetailEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FormId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormDetails");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormFilledEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FormId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("FormFills");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormItemEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FormId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<long>("ItemTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentFormItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ParentFormItemId");

                    b.ToTable("FormItems");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormItemValueEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FormFilledId")
                        .HasColumnType("bigint");

                    b.Property<long>("FormItemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormFilledId");

                    b.HasIndex("FormItemId");

                    b.ToTable("FormItemValues");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.ItemTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("ItemTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Title = "DateTime",
                            Type = (byte)10
                        },
                        new
                        {
                            Id = 2L,
                            Title = "DateOnly",
                            Type = (byte)11
                        },
                        new
                        {
                            Id = 3L,
                            Title = "TimeOnly",
                            Type = (byte)12
                        },
                        new
                        {
                            Id = 4L,
                            Title = "Label",
                            Type = (byte)13
                        },
                        new
                        {
                            Id = 5L,
                            Title = "CheckBox",
                            Type = (byte)8
                        },
                        new
                        {
                            Id = 6L,
                            Title = "CheckList",
                            Type = (byte)7
                        },
                        new
                        {
                            Id = 7L,
                            Title = "OptionList",
                            Type = (byte)9
                        },
                        new
                        {
                            Id = 8L,
                            Title = "TextBox",
                            Type = (byte)6
                        });
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormDetailEntity", b =>
                {
                    b.HasOne("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormEntity", "Form")
                        .WithMany("FormDetails")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormFilledEntity", b =>
                {
                    b.HasOne("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormEntity", "Form")
                        .WithMany("FormFills")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormItemEntity", b =>
                {
                    b.HasOne("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormEntity", "Form")
                        .WithMany("FormItems")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.ItemTypeEntity", "ItemType")
                        .WithMany("FormItems")
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormItemEntity", "ParentFormItem")
                        .WithMany("Children")
                        .HasForeignKey("ParentFormItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Form");

                    b.Navigation("ItemType");

                    b.Navigation("ParentFormItem");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormItemValueEntity", b =>
                {
                    b.HasOne("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormFilledEntity", "FormFilled")
                        .WithMany("FormItemValues")
                        .HasForeignKey("FormFilledId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormItemEntity", "FormItem")
                        .WithMany("FormItemValues")
                        .HasForeignKey("FormItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FormFilled");

                    b.Navigation("FormItem");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormEntity", b =>
                {
                    b.Navigation("FormDetails");

                    b.Navigation("FormFills");

                    b.Navigation("FormItems");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormFilledEntity", b =>
                {
                    b.Navigation("FormItemValues");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.FormItemEntity", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("FormItemValues");
                });

            modelBuilder.Entity("EasyMicroservices.TemplateGeneratorMicroservice.Database.Entities.ItemTypeEntity", b =>
                {
                    b.Navigation("FormItems");
                });
#pragma warning restore 612, 618
        }
    }
}
